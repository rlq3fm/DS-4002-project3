geom_line(aes(x=time.2023,y=E_Y.pred + e_t.pred$upper[,2]),
color="red",linetype="dashed") +
xlab("") + ylab("Number of Crimes") +
ggtitle("Crime Trend + Seasonal Model + ARIMA of Residuals")
model1.predictions
# need to group by date
shots_ts <- train %>% group_by(Date) %>% summarize(sum(ShotsFired_IllegalHunting))
colnames(shots_ts)[2]="Total"
shots_ts$month <- format(as.Date(shots_ts$Date, format="%Y-%m-%d"),"%m")
shots_ts$year <- format(as.Date(shots_ts$Date, format="%Y-%m-%d"),"%Y")
shots_ts$month <- paste(shots_ts$year, shots_ts$month,sep="-")
shots_ts <- shots_ts %>% group_by(month) %>% summarize(sum(Total))
colnames(shots_ts)[2]="MonthTotal"
str(shots_ts)
shots_ts$t <- 1:nrow(shots_ts)
# time series
##use the ts() command to get a time series
shots.ts<-ts(shots_ts$MonthTotal)
autoplot(shots.ts) # no need to take out covid year for this
View(shots_ts)
# Get the periodogram for crime.ts
pg.shots <- spec.pgram(shots.ts,spans=9,demean=T,log='no')
spec.shots <- data.frame(freq=pg.shots$freq, spec=pg.shots$spec)
# find periods of peaks
# sort spectrum from largest to smallest and find index
sorted.spec <- sort(pg.shots$spec, decreasing=T, index.return=T)
# corresponding periods (omegas = frequences, Ts = periods)
sorted.omegas <- pg.shots$freq[sorted.spec$ix]
sorted.Ts <- 1/pg.shots$freq[sorted.spec$ix]
# look at first 20
sorted.omegas[1:20]
sorted.Ts[1:20]
# just trend
shots.trend<-lm(shots.ts ~ shots_ts$t)
summary(shots.trend) # trend is not significant
# Plot temp.trend model
ggplot(shots_ts, aes(x=t,y=MonthTotal)) + geom_line() +
stat_smooth(method="lm",col="red") + xlab("") + ylab("Number of Shots Fired Crimes")
# add seasonality
shots.seasonal <- lm(ts(MonthTotal) ~ t + sin(2*pi*t/12) + cos(2*pi*t/12),shots_ts)
summary(shots.seasonal) # seasonality & trend significant
# Plot temp.trend.seasonal model
ggplot(shots_ts, aes(x=t,y=MonthTotal)) + geom_line() +
geom_line(aes(x=t,y=shots.seasonal$fitted.values),color="red") +
xlab("") + ylab("Number of Shots Fired Crimes")
# residuals for ar, ma, arma models
e.ts.shots <- ts(shots.seasonal$residuals)
# Plot the residuals
autoplot(e.ts.shots)
# ACF and PACF
# autocorrelation (ACF) of the residuals
shots.acf <- ggAcf(e.ts.shots)
# partial autocorrelation (PACF) of the residuals
shots.pacf <- ggPacf(e.ts.shots)
# Plot acf and pacf side by side for easier examination
ggarrange(shots.acf,shots.pacf,nrow=2,ncol=1)
# straight to automatic model selection
shots.auto <- auto.arima(e.ts.shots,approximation=FALSE)
summary(shots.auto)
shots_test_ts <- test %>% group_by(Date) %>% summarize(sum(ShotsFired_IllegalHunting))
View(test)
test <- read_csv("data/crime_2023.csv")
shots_test_ts <- test %>% group_by(Date) %>% summarize(sum(ShotsFired_IllegalHunting))
colnames(shots_test_ts)[2]="Total"
shots_test_ts$month <- format(as.Date(shots_test_ts$Date, format="%Y-%m-%d"),"%m")
shots_test_ts <- shots_test_ts %>% group_by(month) %>% summarize(sum(Total))
colnames(shots_test_ts)[2]="MonthTotal"
shots_test_ts$t <- 1:nrow(shots_test_ts)
# comparing with actual 2023 data
# predictions from crime.auto
pred <- predict(shots.seasonal, newdata=shots_test_ts) # model
`2023` <- data.frame(month = c(1:4))
`2023` %>% mutate(actual = shots_test_ts$MonthTotal,predicted = pred) # 1-57 are training, 58-61 are predictions
model2.predictions <- ggplot() +
geom_line(aes(x=shots_test_ts$t,y=shots_test_ts$MonthTotal),color="black") +
geom_line(aes(x=shots_test_ts$t,y=pred),color="red") +
xlab("Month") + ylab("Number of Crimes") +
ggtitle("Predicted vs Actual Monthly Shots Fired Crimes 2023")
model2.predictions
# MSE:
mean((pred-shots_test_ts$MonthTotal)^2)
knitr::opts_chunk$set(echo = TRUE)
library(mtsdi)
library(forecast)
library(ggplot2)
library(lubridate)
library(tidyverse)
library(ggfortify)
library(ggpubr)
library(tseries)
library(stringr)
train <- read_csv("data/crime_wo_2023.csv")
test <- read_csv("data/crime_2023.csv")
# remove first column with row numbers
train <- train[,-1]
test <- test[,-1]
# need to group by date
train_ts <- train %>% group_by(Date) %>% summarize(sum(NumCrimes))
colnames(train_ts)[2]="NumCrimes"
test_ts <- test %>% group_by(Date) %>% summarize(sum(NumCrimes))
colnames(test_ts)[2]="NumCrimes"
# time series
##use the ts() command to get a time series
crime.ts<-ts(train_ts$NumCrimes)
autoplot(crime.ts) # looks good
# Get the periodogram for crime.ts
pg.crime <- spec.pgram(crime.ts,spans=9,demean=T,log='no')
spec.crime <- data.frame(freq=pg.crime$freq, spec=pg.crime$spec)
ggplot(spec.crime) + geom_line(aes(x=freq,y=spec)) +
ggtitle("Smooth Periodogram of Charlottesville Crime")
# Remove march 2020 - march 2021 (COVID)
train_ts_no2020 <- train_ts %>% filter(!(Date>="2020-03-01" & Date<="2021-03-01"))
train_ts_no2020$t<-1:nrow(train_ts_no2020)
# redo trend model
# make it a time series
crime.ts1 <- ts(train_ts_no2020$NumCrimes)
# first checking seasonality
# Get the periodogram for crime.ts
pg.crime1 <- spec.pgram(crime.ts1,spans=9,demean=T,log='no')
spec.crime1 <- data.frame(freq=pg.crime1$freq, spec=pg.crime1$spec)
ggplot(spec.crime1) + geom_line(aes(x=freq,y=spec)) +
ggtitle("Smooth Periodogram of Charlottesville Crime")
# sort spectrum from largest to smallest and find index
sorted.spec1 <- sort(pg.crime1$spec, decreasing=T, index.return=T)
# corresponding periods (omegas = frequences, Ts = periods)
sorted.omegas1 <- pg.crime1$freq[sorted.spec$ix]
# sort spectrum from largest to smallest and find index
sorted.spec1 <- sort(pg.crime1$spec, decreasing=T, index.return=T)
# corresponding periods (omegas = frequences, Ts = periods)
sorted.omegas1 <- pg.crime1$freq[sorted.spec1$ix]
sorted.Ts1 <- 1/pg.crime1$freq[sorted.spec1$ix]
# look at first 20
sorted.omegas1[1:20]
sorted.Ts1[1:20]
# modeling the trend without March 2020-March 2021
# Build a new model, temp.trend which predicts crime.ts based on the time variable
crime.trend1<-lm(crime.ts1 ~ train_ts_no2020$t)
summary(crime.trend1) # time is significant
# Plot temp.trend model
ggplot(train_ts_no2020, aes(x=t,y=NumCrimes)) + geom_line() +
stat_smooth(method="lm",col="red") + xlab("") + ylab("Number of Crimes")
# adding (bi-annual) seasonality
t<- train_ts_no2020$t
crime.trend.seasonal <- lm(crime.ts1 ~ t + sin(2*pi*t/180) + cos(2*pi*t/180))
summary(crime.trend.seasonal) # seasonality & trend significant
# Plot temp.trend.seasonal model
ggplot(train_ts_no2020, aes(x=t,y=NumCrimes)) + geom_line() +
geom_line(aes(x=t,y=crime.trend.seasonal$fitted.values),color="red") +
xlab("") + ylab("Number of Crimes")
# Get the residuals from the trend+season model above and store in e.ts:
e.ts.crime <- ts(crime.trend.seasonal$residuals)
# Plot the residuals for the temp.trend model
autoplot(e.ts.crime)
# ACF and PACF
# autocorrelation (ACF) of the residuals of crime.trend
crime.acf <- ggAcf(e.ts.crime)
# partial autocorrelation (PACF) of the residuals of crime.trend
crime.pacf <- ggPacf(e.ts.crime)
# Plot acf and pacf side by side for easier examination
ggarrange(crime.acf,crime.pacf,nrow=2,ncol=1)
# ar(2) because pacf cuts off after 2 lags
crime.ar2 <- arima(e.ts.crime, order=c(2,0,0), include.mean=FALSE)
# MA(4) because the acf cuts off after 4 lags
crime.ma4 <- arima(e.ts.crime, order=c(0,0,4), include.mean=FALSE)
# arma(2,4) p=2, q=4
crime.arma24 <- arima(e.ts.crime, order=c(2,0,4), include.mean=FALSE)
crime.auto <- auto.arima(e.ts.crime,approximation=FALSE)
# BIC
BIC(crime.ar2)
BIC(crime.ma4)
BIC(crime.arma24)
BIC(crime.auto)
# ARMA(1,3) > AR(2) > ARMA(2,4) > MA(4)
# residuals v fit
model1 = ggplot() + geom_point(aes(x=fitted(crime.ar2), y=crime.ar2$residuals)) + ggtitle("AR2")
model2 = ggplot() + geom_point(aes(x=fitted(crime.ma4), y=crime.ma4$residuals)) + ggtitle("MA4")
model3 = ggplot() + geom_point(aes(x=fitted(crime.arma24), y=crime.arma24$residuals)) + ggtitle("ARMA24")
model4 = ggplot() + geom_point(aes(x=fitted(crime.auto), y=crime.auto$residuals)) + ggtitle("Auto")
ggarrange(model1, model2, model3, model4, ncol=2, nrow=2)
# assess normality of residuals
model1 = qplot(sample=crime.ar2$residuals) + stat_qq_line(color="red") + ggtitle("AR2")
model2 = qplot(sample=crime.ma4$residuals) + stat_qq_line(color="red") + ggtitle("MA4")
model3 = qplot(sample=crime.arma24$residuals) + stat_qq_line(color="red") + ggtitle("ARMA24")
model4 = qplot(sample=crime.auto$residuals) + stat_qq_line(color="red") + ggtitle("Auto")
ggarrange(model1, model2, model3, model4, ncol=2, nrow=2)
# comparing with actual 2023 data
test_ts$t<-1:nrow(test_ts)
# 95 days in 2023 data (test_ts)
time.2023 <- 1:nrow(test_ts)
# 2023 time series
ts.2023 <- ts(test_ts$NumCrimes)
# predictions from crime.auto
E_Y.pred <- predict(crime.trend.seasonal, newdata=test_ts) # model
e_t.pred <- forecast(crime.auto, h=95) # residuals; period = 95 days
prediction.2023 <- E_Y.pred + e_t.pred$mean
# MSE:
mean((prediction.2023-test_ts$NumCrimes)^2)
# Plot actual 2023 crimes vs predicted crimes
# with ggplot
model1.predictions <- ggplot() +
geom_line(aes(x=time.2023,y=test_ts$NumCrimes),color="black") +
geom_line(aes(x=time.2023,y=prediction.2023),color="red") +
geom_line(aes(x=time.2023,y=E_Y.pred + e_t.pred$lower[,2]),
color="red",linetype="dashed") +
geom_line(aes(x=time.2023,y=E_Y.pred + e_t.pred$upper[,2]),
color="red",linetype="dashed") +
xlab("") + ylab("Number of Crimes") +
ggtitle("Crime Trend + Seasonal Model + ARIMA of Residuals")
model1.predictions
# need to group by date
shots_ts <- train %>% group_by(Date) %>% summarize(sum(ShotsFired_IllegalHunting))
colnames(shots_ts)[2]="Total"
shots_ts$month <- format(as.Date(shots_ts$Date, format="%Y-%m-%d"),"%m")
shots_ts$year <- format(as.Date(shots_ts$Date, format="%Y-%m-%d"),"%Y")
shots_ts$month <- paste(shots_ts$year, shots_ts$month,sep="-")
shots_ts <- shots_ts %>% group_by(month) %>% summarize(sum(Total))
colnames(shots_ts)[2]="MonthTotal"
shots_ts$t <- 1:nrow(shots_ts)
# time series
##use the ts() command to get a time series
shots.ts<-ts(shots_ts$MonthTotal)
autoplot(shots.ts) # no need to take out covid year for this
# Get the periodogram for crime.ts
pg.shots <- spec.pgram(shots.ts,spans=9,demean=T,log='no')
spec.shots <- data.frame(freq=pg.shots$freq, spec=pg.shots$spec)
# find periods of peaks
# sort spectrum from largest to smallest and find index
sorted.spec <- sort(pg.shots$spec, decreasing=T, index.return=T)
# corresponding periods (omegas = frequences, Ts = periods)
sorted.omegas <- pg.shots$freq[sorted.spec$ix]
sorted.Ts <- 1/pg.shots$freq[sorted.spec$ix]
# look at first 20
sorted.omegas[1:20]
sorted.Ts[1:20]
# just trend
shots.trend<-lm(shots.ts ~ shots_ts$t)
summary(shots.trend) # trend is not significant
# Plot temp.trend model
ggplot(shots_ts, aes(x=t,y=MonthTotal)) + geom_line() +
stat_smooth(method="lm",col="red") + xlab("") + ylab("Number of Shots Fired Crimes")
# add seasonality
shots.seasonal <- lm(ts(MonthTotal) ~ t + sin(2*pi*t/12) + cos(2*pi*t/12),shots_ts)
summary(shots.seasonal) # seasonality & trend significant
# Plot temp.trend.seasonal model
ggplot(shots_ts, aes(x=t,y=MonthTotal)) + geom_line() +
geom_line(aes(x=t,y=shots.seasonal$fitted.values),color="red") +
xlab("") + ylab("Number of Shots Fired Crimes")
# residuals for ar, ma, arma models
e.ts.shots <- ts(shots.seasonal$residuals)
# Plot the residuals
autoplot(e.ts.shots)
shots_test_ts <- test %>% group_by(Date) %>% summarize(sum(ShotsFired_IllegalHunting))
colnames(shots_test_ts)[2]="Total"
shots_test_ts$month <- format(as.Date(shots_test_ts$Date, format="%Y-%m-%d"),"%m")
shots_test_ts <- shots_test_ts %>% group_by(month) %>% summarize(sum(Total))
colnames(shots_test_ts)[2]="MonthTotal"
shots_test_ts$t <- 1:nrow(shots_test_ts)
# comparing with actual 2023 data
# predictions from crime.auto
pred <- predict(shots.seasonal, newdata=shots_test_ts) # model
`2023` <- data.frame(month = c(1:4))
`2023` %>% mutate(actual = shots_test_ts$MonthTotal,predicted = pred) # 1-57 are training, 58-61 are predictions
View(test_ts)
# Plot actual 2023 crimes vs predicted crimes
# with ggplot
model1.predictions <- ggplot() +
geom_line(aes(x=test_ts$Date,y=test_ts$NumCrimes),color="black") +
geom_line(aes(x=test_ts$Date,y=prediction.2023),color="red") +
geom_line(aes(x=test_ts$Date,y=E_Y.pred + e_t.pred$lower[,2]),
color="red",linetype="dashed") +
geom_line(aes(x=time.2023,y=E_Y.pred + e_t.pred$upper[,2]),
color="red",linetype="dashed") +
xlab("") + ylab("Number of Crimes") +
ggtitle("Crime Trend + Seasonal Model + ARIMA of Residuals")
model1.predictions
# Plot actual 2023 crimes vs predicted crimes
# with ggplot
model1.predictions <- ggplot() +
geom_line(aes(x=time.2023,y=test_ts$NumCrimes),color="black") +
geom_line(aes(x=time.2023,y=prediction.2023),color="red") +
geom_line(aes(x=time.2023,y=E_Y.pred + e_t.pred$lower[,2]),
color="red",linetype="dashed") +
geom_line(aes(x=time.2023,y=E_Y.pred + e_t.pred$upper[,2]),
color="red",linetype="dashed") +
xlab("") + ylab("Number of Crimes") +
ggtitle("Crime Trend + Seasonal Model + ARIMA of Residuals")
model1.predictions
# test data frame
shots_test_ts <- data.frame(t=c(1:4))
View(shots_test_ts)
# test data frame
shots_test_ts <- data.frame(t=c(1:5))
shots_test_ts <- shots_test_ts %>% mutate(month=shots_ts$month[53:57,1])
shots_ts$month[53:57,1]
shots_test_ts$month = shots_ts$month[53:57,1]
shots_test_ts$month =
month = shots_ts$month[53:57,1]
#shots_test_ts$month =
month = shots_ts$month[53:57,1]
#shots_test_ts$month =
month = shots_ts[53:57,1]
shots_test_ts$month = month
month_total = shots_ts[53:57,2]
shots_test_ts$MonthTotal = month_total
# removing august - december ( this is going to be in our test data )
shots_ts <- shots_ts[-53:57,]
# removing august - december ( this is going to be in our test data )
shots_ts <- shots_ts[1:52,]
View(test_ts)
# now adding 2023 data to test data frame
# first have to format it
shots_test_ts1 <- test %>% group_by(Date) %>% summarize(sum(ShotsFired_IllegalHunting))
colnames(shots_test_ts1)[2]="Total"
shots_test_ts1$month <- format(as.Date(shots_test_ts1$Date, format="%Y-%m-%d"),"%m")
shots_test_ts1 <- shots_test_ts1 %>% group_by(month) %>% summarize(sum(Total))
colnames(shots_test_ts1)[2]="MonthTotal"
shots_test_ts1$t <- 1:nrow(shots_test_ts1)
View(shots_test_ts1)
str(shots_test_ts)
colnames(shots_test_ts)[2]="month"
colnames(shots_test_ts)[3]="MonthTotal"
View(shots_test_ts)
colnames(shots_test_ts)[2]="month"
colnames(shots_test_ts)[3]="MonthTotal"
colnames(shots_test_ts)=c("t","month","MonthTotal")
colnames(shots_test_ts)
View(shots_test_ts1)
# add jan, feb, march data
shots_test_ts <- shots_test_ts %>% add_row(t = 6, month="2023-01", MonthTotal = 4) %>%
add_row(t = 7, month="2023-02", MonthTotal = 6) %>%
add_row(t = 8, month="2023-03", MonthTotal = 3)
?rbind()
shots_test_ts <- shots_test_ts %>%
rename(month = month$month, MonthTotal = MonthTotal$MonthTotal)
colnames(shots_test_ts)
new_df <- merge(shots_test_ts, shots_test_ts1)
View(new_df)
new_df <- rbind(shots_test_ts, shots_test_ts1)
new_df[6,1:2] <- c(6,"2023-01")
new_df[7,1:2] <- c(7,"2023-02")
new_df[8,1:2] <- c(8,"2023-03")
new_df<- new_df[1:8]
new_df<- new_df[1:8,]
View(new_df)
shots_ts$t <- 1:nrow(shots_ts)
# time series
##use the ts() command to get a time series
shots.ts<-ts(shots_ts$MonthTotal)
autoplot(shots.ts) # no need to take out covid year for this
# add seasonality
shots.seasonal <- lm(ts(MonthTotal) ~ t + sin(2*pi*t/12) + cos(2*pi*t/12),shots_ts)
summary(shots.seasonal) # seasonality & trend significant
# Plot temp.trend.seasonal model
ggplot(shots_ts, aes(x=t,y=MonthTotal)) + geom_line() +
geom_line(aes(x=t,y=shots.seasonal$fitted.values),color="red") +
xlab("") + ylab("Number of Shots Fired Crimes")
# comparing with actual 2023 data
# predictions from crime.auto
pred <- predict(shots.seasonal, newdata=shots_test_ts) # model
# comparing with actual 2023 data
# predictions from crime.auto
pred <- predict(shots.seasonal, newdata=new_df) # model
# add seasonality
shots.seasonal <- lm(ts(MonthTotal) ~ t + sin(2*pi*t/12) + cos(2*pi*t/12),shots_ts)
summary(shots.seasonal) # seasonality & trend significant
# Plot temp.trend.seasonal model
ggplot(shots_ts, aes(x=t,y=MonthTotal)) + geom_line() +
geom_line(aes(x=t,y=shots.seasonal$fitted.values),color="red") +
xlab("") + ylab("Number of Shots Fired Crimes")
# comparing with actual 2023 data
# predictions from crime.auto
pred <- predict(shots.seasonal, newdata=new_df) # model
# reorder to match training data: month, MonthTotal, t
new_df <- new_df[,c("month","MonthTotal","t")]
# comparing with actual 2023 data
# predictions from crime.auto
pred <- predict(shots.seasonal, newdata=new_df) # model
# add seasonality
shots.seasonal <- lm(ts(MonthTotal) ~ t + sin(2*pi*t/12) + cos(2*pi*t/12),shots_ts)
summary(shots.seasonal) # seasonality & trend significant
# comparing with actual 2023 data
# predictions from crime.auto
pred <- predict(shots.seasonal, newdata=new_df) # model
str(new_df)
str(new_df)
new_df$t <- as.numeric(new_df$t)
str(new_df)
# comparing with actual 2023 data
# predictions from crime.auto
pred <- predict(shots.seasonal, newdata=new_df) # model
`2023` <- data.frame(month = c(1:8))
`2023` %>% mutate(actual = new_df$MonthTotal,predicted = pred)
`2023` %>% mutate(actual = new_df$MonthTotal$MonthTotal,predicted = pred)
model2.predictions <- ggplot(data=`2023`) +
geom_line(aes(x=t,y=actual),color="black") +
geom_line(aes(x=t,y=predicted),color="red") +
xlab("Month") + ylab("Number of Crimes") +
ggtitle("Predicted vs Actual Monthly Shots Fired Crimes 2023")
model2.predictions
colnames(`2023`)
View(2023)
2023
results <- data.frame(month = c(1:8))
results %>% mutate(actual = new_df$MonthTotal$MonthTotal,predicted = pred)
colnames(results)
results <- results %>% mutate(actual = new_df$MonthTotal$MonthTotal,predicted = pred)
colnames(results)
results
model2.predictions <- ggplot(data=results) +
geom_line(aes(x=t,y=actual),color="black") +
geom_line(aes(x=t,y=predicted),color="red") +
xlab("Month") + ylab("Number of Crimes") +
ggtitle("Predicted vs Actual Monthly Shots Fired Crimes 2023")
model2.predictions
View(results)
model2.predictions <- ggplot(data=results,aes(x=t)) +
geom_line(aes(y=actual),color="black") +
geom_line(aes(y=predicted),color="red") +
xlab("Month") + ylab("Number of Crimes") +
ggtitle("Predicted vs Actual Monthly Shots Fired Crimes")
model2.predictions
# MSE:
mean((pred-shots_test_ts$MonthTotal)^2)
# MSE:
mean((pred-new_df$MonthTotal$MonthTotal)^2)
# Plot actual 2023 crimes vs predicted crimes
# with ggplot
model1.predictions <- ggplot() +
geom_line(aes(x=time.2023,y=test_ts$NumCrimes),color="#003ba3") +
geom_line(aes(x=time.2023,y=prediction.2023),color="#4a8cff") +
geom_line(aes(x=time.2023,y=E_Y.pred + e_t.pred$lower[,2]),
color="#4a8cff",linetype="dashed") +
geom_line(aes(x=time.2023,y=E_Y.pred + e_t.pred$upper[,2]),
color="#4a8cff",linetype="dashed") +
xlab("") + ylab("Number of Crimes") +
ggtitle("Crime Trend + Seasonal Model + ARIMA of Residuals")
model1.predictions
# Plot actual 2023 crimes vs predicted crimes
# with ggplot
model1.predictions <- ggplot() +
geom_line(aes(x=time.2023,y=test_ts$NumCrimes),color="#003ba3") +
geom_line(aes(x=time.2023,y=prediction.2023),color="#4a8cff") +
geom_line(aes(x=time.2023,y=E_Y.pred + e_t.pred$lower[,2]),
color="#4a8cff",linetype="dashed") +
geom_line(aes(x=time.2023,y=E_Y.pred + e_t.pred$upper[,2]),
color="#4a8cff",linetype="dashed") +
xlab("") + ylab("Number of Crimes") +
ggtitle("Crime Trend + Seasonal Model + ARIMA of Residuals") +
theme_classic()
model1.predictions
# Plot actual 2023 crimes vs predicted crimes
# with ggplot
model1.predictions <- ggplot() +
geom_line(aes(x=time.2023,y=test_ts$NumCrimes),color="#003ba3") +
geom_line(aes(x=time.2023,y=prediction.2023),color="#4a8cff") +
geom_line(aes(x=time.2023,y=E_Y.pred + e_t.pred$lower[,2]),
color="#4a8cff",linetype="dashed") +
geom_line(aes(x=time.2023,y=E_Y.pred + e_t.pred$upper[,2]),
color="#4a8cff",linetype="dashed") +
xlab("") + ylab("Number of Crimes") +
ggtitle("Crime Model + ARIMA of Residuals on 2023 Data") +
theme_classic()
model1.predictions
# Plot temp.trend.seasonal model
ggplot(train_ts_no2020, aes(x=t,y=NumCrimes)) + geom_line() +
geom_line(aes(x=t,y=crime.trend.seasonal$fitted.values),color="#4a8cff") +
xlab("") + ylab("Number of Crimes")
# Plot temp.trend.seasonal model
ggplot(shots_ts, aes(x=t,y=MonthTotal)) + geom_line() +
geom_line(aes(x=t,y=shots.seasonal$fitted.values),color="#4a8cff") +
xlab("") + ylab("Number of Shots Fired Crimes")
# Plot temp.trend.seasonal model
ggplot(shots_ts, aes(x=t,y=MonthTotal)) + geom_line() +
geom_line(aes(x=t,y=shots.seasonal$fitted.values),color="#4a8cff") +
xlab("") + ylab("Number of Shots Fired Crimes") +
theme_classic()
# Plot temp.trend.seasonal model
ggplot(train_ts_no2020, aes(x=t,y=NumCrimes)) + geom_line() +
geom_line(aes(x=t,y=crime.trend.seasonal$fitted.values),color="#4a8cff") +
xlab("") + ylab("Number of Crimes")+ theme_classic()
# Plot temp.trend.seasonal model
ggplot(train_ts_no2020, aes(x=t,y=NumCrimes)) + geom_line() +
geom_line(aes(x=t,y=crime.trend.seasonal$fitted.values,size=2),color="#4a8cff") +
xlab("") + ylab("Number of Crimes")+ theme_classic()
# Plot temp.trend.seasonal model
ggplot(train_ts_no2020, aes(x=t,y=NumCrimes)) + geom_line() +
geom_line(aes(x=t,y=crime.trend.seasonal$fitted.values,size=1),color="#4a8cff") +
xlab("") + ylab("Number of Crimes")+ theme_classic()
# Plot temp.trend.seasonal model
ggplot(train_ts_no2020, aes(x=t,y=NumCrimes)) + geom_line() +
geom_line(aes(x=t,y=crime.trend.seasonal$fitted.values,size=.5),color="#4a8cff") +
xlab("") + ylab("Number of Crimes")+ theme_classic()
# Plot temp.trend.seasonal model
ggplot(train_ts_no2020, aes(x=t,y=NumCrimes)) + geom_line() +
geom_line(aes(x=t,y=crime.trend.seasonal$fitted.values),color="#4a8cff") +
xlab("") + ylab("Number of Crimes")+ theme_classic()
# Plot temp.trend.seasonal model
ggplot(train_ts_no2020, aes(x=t,y=NumCrimes)) + geom_line() +
geom_line(aes(x=t,y=crime.trend.seasonal$fitted.values),color="#4a8cff",linewidth=0.5) +
xlab("") + ylab("Number of Crimes")+ theme_classic()
# Plot temp.trend.seasonal model
ggplot(train_ts_no2020, aes(x=t,y=NumCrimes)) + geom_line() +
geom_line(aes(x=t,y=crime.trend.seasonal$fitted.values),color="#4a8cff",linewidth=1) +
xlab("") + ylab("Number of Crimes")+ theme_classic()
# Plot temp.trend.seasonal model
ggplot(train_ts_no2020, aes(x=t,y=NumCrimes)) + geom_line() +
geom_line(aes(x=t,y=crime.trend.seasonal$fitted.values),color="#4a8cff",size=1) +
xlab("") + ylab("Number of Crimes")+ theme_classic()
# Plot temp.trend.seasonal model
ggplot(train_ts_no2020, aes(x=t,y=NumCrimes)) + geom_line() +
geom_line(aes(x=t,y=crime.trend.seasonal$fitted.values),color="#4a8cff",size=1.5) +
xlab("") + ylab("Number of Crimes")+ theme_classic()
